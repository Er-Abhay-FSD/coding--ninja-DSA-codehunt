Sum of powers of 3

class Solution {
    static public boolean checkPowersOfThree(int n) {
        
        // Write your code here
       while(n > 0){
           if(n % 3 == 2){
               return false;
           }
           n /= 3;
       }
       return true;
    }
}

Frequency Palindrome

import java.util.*;

public class Solution {

	public static String checkFreqPalindrome(String freq){
		if(freq.length() == 1){
			return "Yes";
		}
		HashMap<Character , Integer> map = new HashMap<>();
		for(int i = 0; i < freq.length() / 2; i++){
			if(map.containsKey(freq.charAt(i))){
				int temp = map.get(freq.charAt(i));
				temp++;
				map.put(freq.charAt(i) , temp);
			}
			else{
				map.put(freq.charAt(i) , 1);
			}
		}
		int start;
		if(freq.length() % 2 == 0){
			start = freq.length() / 2;
		}
		else{
			start = freq.length() / 2 + 1;
		}
		for(int i = start; i < freq.length(); i++){
			if(map.containsKey(freq.charAt(i))){
				int temp = map.get(freq.charAt(i));
				temp--;
				map.put(freq.charAt(i) , temp);
			}
			else{
				return "No";
			}
		}
		Set<Character> keys = map.keySet();
		for(Character s : keys){
			if(map.get(s) != 0){
				return "No";
			}
		}
		return "Yes";
	}

	public static void main(String[] args) {
		/* Your class should be named Solution.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/
		Scanner s = new Scanner(System.in);
		String input = s.next();
		int test = s.nextInt();
		for(int i = 0; i < test; i++){
			int start = s.nextInt();
			int end = s.nextInt();
			String freq = input.substring(start , end + 1);
			System.out.println(checkFreqPalindrome(freq));
		}

		// Write your code here

	}

}

Flags 

public class Solution {

	public static long find_Ways(int N)
	{
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		 */
		 if(N == 1 || N == 2){
			 return 2;
		 }
		return find_Ways(N - 1) + find_Ways(N - 2);
	}
}


Find Word


public class Solution {

    public static int checkOccurence(char[][] input , String target , int row , int col , int dir){

        if(target.length() == 0){
            return 1;
        }
        if(row < 0 || row >= input.length || col < 0 || col >= input[row].length || input[row][col] != target.charAt(0)){
            return 0;
        }
        target = target.substring(1);
        if(dir == 1){
            return checkOccurence(input , target , row - 1 , col , 1);
        }
        else if(dir == 2){
            return checkOccurence(input , target , row + 1 , col , 2);
        }
        else if(dir == 3){
            return checkOccurence(input , target , row , col - 1 , 3);
        }
        else{
            return checkOccurence(input , target , row , col + 1 , 4);
        }
    }

	public static int findPath(char[][] inputMatrix, String target){
       //Write your code here
       int count = 0;
       for(int i = 0; i < inputMatrix.length; i++){
           for(int j = 0; j < inputMatrix[i].length; j++){
               int sum = 0;
               if(inputMatrix[i][j] == target.charAt(0)){
                    int up = checkOccurence(inputMatrix , target.substring(1) , i - 1 , j , 1);
                    int down = checkOccurence(inputMatrix , target.substring(1) , i + 1 , j , 2);
                    int left = checkOccurence(inputMatrix , target.substring(1) , i , j - 1 , 3);
                    int right = checkOccurence(inputMatrix , target.substring(1) , i , j + 1 , 4);
                    sum = up + down + left + right;
               }
               count += sum;
           }
       }
       return count;
    }
}
